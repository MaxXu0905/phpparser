package com.ailk.utils;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStreamWriter;import java.io.StringWriter;import java.io.Writer;import java.util.List;import org.apache.commons.lang.StringEscapeUtils;import org.apache.xml.serialize.OutputFormat;import org.apache.xml.serialize.XMLSerializer;import org.exolab.castor.mapping.Mapping;import org.exolab.castor.mapping.MappingException;import org.exolab.castor.xml.MarshalException;import org.exolab.castor.xml.Marshaller;import org.exolab.castor.xml.ValidationException;public class Clazz {	private String name; // 类名	private List<Field> fields;	private List<Constructor> constructors;	private List<Method> methods;	public String getName() {		return name;	}	public void setName(String name) {		this.name = StringEscapeUtils.unescapeHtml(name).replace((char)(0xA0), ' ');	}	public List<Field> getFields() {		return fields;	}	public void setFields(List<Field> fields) {		this.fields = fields;	}	public List<Constructor> getConstructors() {		return constructors;	}	public void setConstructors(List<Constructor> constructors) {		this.constructors = constructors;	}	public List<Method> getMethods() {		return methods;	}	public void setMethods(List<Method> methods) {		this.methods = methods;	}	@Override	public String toString() {		return "Clazz [name=" + name + "\n fields=" + fields + "\n constructors=" + constructors + "\n methods="				+ methods + "]";	}	public void marshal(Writer out) throws MarshalException, ValidationException, IOException, MappingException {		Mapping mapping = new Mapping();		mapping.loadMapping(this.getClass().getClassLoader().getResource("com/ailk/utils/mapping.xml"));		OutputFormat format = new OutputFormat(org.apache.xml.serialize.Method.XML, "UTF-8", true);		String[] cndata = { "signature", "description" };		format.setCDataElements(cndata);		format.setNonEscapingElements(cndata);		XMLSerializer serializer = new XMLSerializer(out, format);		Marshaller marshaller = new Marshaller(serializer.asDocumentHandler());		marshaller.setMapping(mapping);		marshaller.marshal(this);	}	public void toXMLFile(String pre) {		OutputStreamWriter out = null;		try {			int ltIconIndex = this.getName().lastIndexOf("<");			String fileName;			if (ltIconIndex > -1) {				fileName = pre + "/" + this.getName().substring(this.getName().lastIndexOf(".") + 1, ltIconIndex)						+ ".xml";			} else {				fileName = pre + "/" + this.getName().substring(this.getName().lastIndexOf(".") + 1) + ".xml";			}			File dir = new File(fileName.substring(0, fileName.lastIndexOf("/")));			if (!dir.exists()) {				dir.mkdirs();			}			out = new OutputStreamWriter(new FileOutputStream(fileName), "UTF-8");			this.marshal(out);		} catch (Exception ex) {			ex.printStackTrace();		} finally {			try {				out.close();			} catch (Exception e) {			}		}	}	public String toXMLString() {		try {			StringWriter out = new StringWriter();			this.marshal(out);			return out.toString();		} catch (Exception ex) {			ex.printStackTrace();			return "";		}	}}