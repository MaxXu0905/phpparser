package com.ailk.utils;import java.io.File;import java.util.ArrayList;import org.htmlparser.Node;import org.htmlparser.NodeFilter;import org.htmlparser.Parser;import org.htmlparser.util.NodeList;import org.htmlparser.util.SimpleNodeIterator;public class PhpParser {	public static String BR = "\n";	public static Clazz parseDoc(final File htmlPath) throws Exception {		final Clazz clazz = new Clazz();		clazz.setName(htmlPath.getName());				File[] methodFiles = htmlPath.listFiles();		for(File file : methodFiles){			if(file.getName().contains(".svn")){				continue;			}			Parser parser = new Parser(file.getPath());			parser.setEncoding("utf-8");			final Method method = new Method();			parser.extractAllNodesThatMatch(new NodeFilter() {				@Override				public boolean accept(Node node) {					extractDetail4Method( node,clazz,method);					return true;				}			});			if(clazz.getMethods() == null){				clazz.setMethods(new ArrayList<Method>());			}			clazz.getMethods().add(method);		}				return clazz;	}	private static void extractDetail4Method(Node _node, Clazz clazz,Method method) {			String nodeText = _node.getText().trim();//			System.out.println(nodeText);			if ("h1".equalsIgnoreCase(nodeText)) {				System.out.println("method name = " + _node.toPlainTextString());				method.setName(_node.toPlainTextString());			}//			if ("DIV  CLASS=\"refnamediv\"".equalsIgnoreCase(nodeText)) {//				System.out.println("signatureBuilder  = " + _node.toPlainTextString());//				method.setSignature(_node.toPlainTextString());//			}			if ("DIV  CLASS=\"refsect1\"".equalsIgnoreCase(nodeText)) { 				String desc = _node.toHtml().replaceAll("<A  HREF=\".*?>", "<SPAN HREF=\"#\">");				System.out.println("desBuilder  = " + desc);				method.setDescription(desc);				NodeList nodes = _node.getChildren();				String sign ;				if(nodes.elementAt(2) != null && nodes.elementAt(4) != null &&  nodes.elementAt(6) != null){					 sign = nodes.elementAt(2).toPlainTextString() + nodes.elementAt(4).toPlainTextString() + nodes.elementAt(6).toPlainTextString();				}else{					 sign = "";				} 				System.out.println("sign ==== " + sign);				method.setSignature(sign);			}	}	public static Node getFirstNotBRChild(Node node) {		Node child = null;		if (node == null) {			return child;		}		SimpleNodeIterator iter = node.getChildren().elements();		while (iter.hasMoreNodes()) {			child = iter.nextNode();			if (!BR.equals(child.toPlainTextString())) {				break;			}		}		return child;	}	public static void main(String[] args) throws Exception {				File[] srcFiles = new File("assets/source").listFiles();		File target = new File("assets/target");		for (int i = 0; i < srcFiles.length; i++) {			File srcFile = srcFiles[i];			System.out.println("开始解析文件[" + srcFile.getName() + "] (" + (i + 1) + "/" + srcFiles.length + ")");			File file = new File(srcFile.getPath());			if(file.isDirectory() && !file.getName().contains(".svn")){				Clazz clazz = parseDoc(file);				clazz.toXMLFile(target.getPath());			}					}		System.out.println("Conguratulations");	}}